import markdown
import base64

base64_text = ""

def render(text):
    decoded_text = base64.b64decode(text.encode()).decode()
    return markdown.markdown(decoded_text)

def handler(event, context=None):
    html = render(base64_text)

    return {
        "result": "Render base64 to markdown finished!"
    }


if __name__ == "__main__":
    event = {}
    print(handler(event))